from typing import Any
from utils.BASE_URL import BASE_URL
from mcp_server import mcp
import logging
from helpers.make_request import make_request
from utils.obter_info_func import get_func_info

@mcp.tool()
async def buscar_curriculo_recente_curso(curso:Any) -> dict:
    """
    Retorna a informa√ß√£o do curr√≠culo mais recente de um curso espec√≠fico da UFCG.

    Args:
        campus (Any): C√≥digo do campus.
        curso (Any): C√≥digo do curso.

    Returns:
        dict: Dicion√°rio com informa√ß√µes do curr√≠culo no formato:
            {
                "codigo_do_curso": int,                                 # C√≥digo do curso
                "codigo_do_curriculo": int,                             # Ano/c√≥digo do curr√≠culo
                "regime": int,                                          # Regime acad√™mico
                "duracao_minima": int,                                  # Dura√ß√£o m√≠nima (per√≠odos)
                "duracao_maxima": int,                                  # Dura√ß√£o m√°xima (per√≠odos)
                "duracao_media": int,                                   # Dura√ß√£o m√©dia (per√≠odos)
                "carga_horaria_creditos_minima": int,                   # Cr√©ditos m√≠nimos por per√≠odo
                "carga_horaria_creditos_maxima": int,                   # Cr√©ditos m√°ximos por per√≠odo
                "carga_horaria_disciplinas_obrigatorias_minima": int,   # CH m√≠nima obrigat√≥ria
                "carga_horaria_disciplinas_optativas_minima": int,      # CH m√≠nima optativa
                "carga_horaria_atividades_complementares_minima": int,  # CH m√≠nima atividades complementares
                "carga_horaria_minima_total": int,                      # CH m√≠nima total do curso
                "minimo_creditos_disciplinas_obrigatorias": int,        # Cr√©ditos obrigat√≥rios m√≠nimos
                "minimo_creditos_disciplinas_optativas": int,           # Cr√©ditos optativos m√≠nimos
                "minimo_creditos_atividades_complementares": int,       # Cr√©ditos atividades complementares m√≠nimos
                "minimo_creditos_total": int,                           # Cr√©ditos totais m√≠nimos
                "numero_disciplinas_obrigatorias_minimo": int,          # Disciplinas obrigat√≥rias m√≠nimas
                "numero_disciplinas_optativas_minimo": int,             # Disciplinas optativas m√≠nimas
                "numero_atividades_complementares_minimo": int,         # Atividades complementares m√≠nimas
                "numero_disciplinas_minimo": int,                       # N√∫mero total m√≠nimo de disciplinas
                "numero_interrupcoes_matricula_maximo": int,            # M√°x. interrup√ß√µes de matr√≠cula
                "numero_interrupcoes_periodo_maximo": int,              # M√°x. interrup√ß√µes de per√≠odo
                "numero_matriculas_institucionais_maximo": int,         # M√°x. matr√≠culas institucionais
                "numero_matriculas_extensao_maximo": int,               # M√°x. matr√≠culas de extens√£o
                "carga_horaria_extensao": int,                          # CH de extens√£o
                "disciplina_atividades_complementares_flexiveis": int,  # C√≥digo da disciplina flex√≠vel
                "disciplina_atividades_complementares_extensao": int,   # C√≥digo da disciplina de extens√£o
                "periodo_inicio": int                                   # Per√≠odo de in√≠cio do curr√≠culo
            }
    """

    
    params = {
        "curso": curso
    }

    func_name, parametros_str = get_func_info()
    url = f"{BASE_URL}/curriculos"

    try:
        logging.info(f"üîç Chamando {func_name}({parametros_str})")
        data = await make_request(url, params)

        if not data:
            return "N√£o foi poss√≠vel obter o curr√≠culo ou nenhum curr√≠culo foi encontrado"
        
        return data[-1]
    except Exception as e:
        import traceback
        print(f"‚ùåTool {func_name} deu erro:", e)
        traceback.print_exc()
        raise

