from typing import Any
from utils.BASE_URL import BASE_URL
from mcp_server import mcp
import logging
from helpers.make_request import make_request
from utils.obter_info_func import get_func_info

@mcp.tool()
async def buscar_turmas_disciplina(curso: Any, disciplina: Any, turma: Any, periodo_de: Any, periodo_ate: Any) -> list[dict]:
    """
    Retorna informa√ß√µes sobre as turmas de uma disciplina espec√≠fica de um curso da UFCG,
    incluindo per√≠odo, carga hor√°ria e tipo de oferta.

    Args:
        curso (Any): C√≥digo do curso.
        disciplina (Any): C√≥digo da disciplina.
        turma (Any): N√∫mero da turma.
        periodo_de (Any): Per√≠odo inicial (ex.: "2020.1").
        periodo_ate (Any): Per√≠odo final (ex.: "2024.2").

    Returns:
        list[dict]: Lista de turmas no formato:
            {
                "turma": int,                        # N√∫mero da turma
                "codigo_da_disciplina": int,          # C√≥digo da disciplina
                "periodo": str,                        # Per√≠odo da disciplina (ex.: "2020.1")
                "numero_de_notas": int,                # Quantidade de notas lan√ßadas
                "quantidade_de_creditos": int,         # N√∫mero de cr√©ditos da disciplina
                "carga_horaria": int,                  # Carga hor√°ria total da disciplina
                "tipo": str                             # Tipo de oferta (ex.: "PRESENCIAL")
            }
    """

    params = { 
        "curso": curso,
        "disciplina": disciplina,
        "periodo-de": periodo_de,
        "periodo_ate": periodo_ate,
        "turma": turma
    }

    func_name, parametros_str = get_func_info()
    url = f"{BASE_URL}/turmas"

    try:
        logging.info(f"üîç Chamando {func_name}({parametros_str})")
        data = await make_request(url, params)

        if not data:
            return "N√£o foi poss√≠vel obter o plano de curso ou nenhum plano de curso foi encontrada"
 
        return data
    except Exception as e:
        import traceback
        print(f"‚ùåTool {func_name} deu erro:", e)
        traceback.print_exc()
        raise